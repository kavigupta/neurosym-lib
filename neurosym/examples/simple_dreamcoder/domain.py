import numpy as np


def example_dataset(num_sequences, len_sequences, *, seed, slack=30, stride=5):
    """
    An example dataset for a simple symbolic regression task. The sequences here
    are generated by taking an IID uniform distribution on ```[-2, 2]``` of length ```(len_sequences * stride + slack)```,
    then averaging over the slack window (compensating for variance by multiplying by sqrt(slack)),
    then taking every stride-th element.

    This is done in order to make the sequence more smooth and thus more "naturalistic"; however
    there is no guarantee that the sequences are generated by a simple function.

    :param num_sequences: The number of sequences to generate
    :param len_sequences: The length of each sequence
    :param seed: The random seed to use
    :param slack: The slack window to average over. Larger values will make the sequences more smooth
    :param stride: The stride to take when downsampling. Larger values will make the sequences more variant

    :return: A tuple of ```(xs, values)```, where xs is the x-axis and values is a matrix of shape ```(num_sequences, len_sequences)```
    """
    xs = np.linspace(-10, 10, len_sequences * stride)
    values = (
        np.random.RandomState(seed).rand(num_sequences, len_sequences * stride + slack)
        * 4
        - 2
    )
    values = np.mean(
        [values[:, i : i + len_sequences * stride] for i in range(slack)], axis=0
    )
    values *= np.sqrt(slack)
    values = values[:, ::stride]
    xs = xs[::stride]
    return xs, values
